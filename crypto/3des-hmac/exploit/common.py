def xor(xs, ys):
    assert len(xs) == len(ys)
    return bytes(x ^ y for x, y in zip(xs, ys))


def split_blocks(msg, block_size):
    assert len(msg) % block_size == 0
    return [msg[i*block_size:(i+1)*block_size]
            for i in range(len(msg) // block_size)]


def join_blocks(blocks):
    return b''.join(blocks)


def pad_pkcs7(msg, block_size):
    padding_len = -len(msg) % block_size
    if padding_len == 0:
        padding_len = block_size
    assert padding_len < 256
    return msg + bytes([padding_len]) * padding_len


def unpad_pkcs7(padded_msg):
    padding_len = padded_msg[-1]
    assert padded_msg[-padding_len:] == padding_len * bytes([padding_len])
    return padded_msg[:-padding_len]


def test_pkcs7_padding():
    msg = b'B'*13
    padded = pad_pkcs7(msg, 16)
    assert padded == b'B'*13 + b'\x03'*3, padded
    msg = b'B'*16
    padded = pad_pkcs7(msg, 16)
    assert padded == b'B'*16 + b'\x10'*16, padded


test_pkcs7_padding()
