#!/usr/bin/env python3
from argparse import ArgumentParser
from binascii import hexlify, unhexlify
import base64
import re
import requests
import sys
from requests import ConnectionError
from hashpumpy import hashpump
from cbc_oracle import CBCPaddingOracle, CBCOraclePwner

parser = ArgumentParser(prog=sys.argv[0])
parser.add_argument('--host',
                    action='store',
                    default='localhost',
                    help='target host')
parser.add_argument('--port', type=int, default=8080, help='target port')
args = parser.parse_args()

HOST = args.host
PORT = args.port


class AarhusOracle(CBCPaddingOracle):
    def __init__(self):
        self.base_url = 'http://{}:{}/'.format(HOST, PORT)
        self.session = requests.Session()

    def query(self, ciphertext):
        b64 = base64.b64encode(ciphertext, altchars=b'-_').decode()
        self.session.cookies['auth'] = b64

        while True:
            try:
                _ = self.session.get(self.base_url)
                #  _ = requests.get(self.base_url, cookies={'auth': b64})
                return True
            except ConnectionError as e:
                if 'ConnectionResetError' in repr(e):
                    continue
                return False
        assert False


def pwn_aarhus():
    base_url = 'http://{}:{}/'.format(HOST, PORT)
    oracle = AarhusOracle()
    pwner = CBCOraclePwner(oracle, verbose=True, block_size=8, nesting_level=3)
    s = requests.session()
    s.post(base_url + 'login/', data={'username': 'flora', 'password': 'mate'})
    cookie = s.cookies['auth']
    print("[+] got cookie: {}".format(cookie))
    ct_1 = base64.b64decode(cookie, altchars=b'-_')
    print("[+] got encrypted message 1: {}".format(hexlify(ct_1).decode()))
    pt_1 = pwner.decrypt_unpad_msg(ct_1)
    print("[+] got tagged plaintext: {}".format(pt_1))
    tag_size = 16
    mac, original_data = pt_1[:tag_size], pt_1[tag_size:]
    #  print("mac", mac)
    #  print("original_data", original_data)
    extension = b'&username=almighty_administrator&is_admin=of_course'
    print("[+] doing length extension with: {}".format(extension))
    new_mac, new_msg = hashpump(hexlify(mac), original_data, extension, 16)
    new_mac = unhexlify(new_mac)
    print("[+] got new mac: {}".format(new_mac))
    print("[+] for message: {}".format(new_msg))
    new_pt = new_mac + new_msg
    new_ct = pwner.encrypt_pad_msg(new_pt)
    print("[+] encrypted new message: {}".format(hexlify(new_ct).decode()))
    del s.cookies['auth']
    s.cookies['auth'] = base64.b64encode(new_ct, altchars=b'-_').decode()
    res = s.get(base_url + 'flag/')
    m = re.search(r'(flag|FLAG)\{[^}]+\}', res.text)
    assert (m)
    flag = m.group(0)
    print("[+] recovered flag:")
    print(flag)


if __name__ == '__main__':
    pwn_aarhus()
